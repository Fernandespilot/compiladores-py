{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/Compiladores/blob/main/IAestaticaFutipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "2PFEYgiOzVQZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "a49d7c33-20ed-4c3e-c732-758da64455c8"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-b2e7f64f-d7b4-45a0-94dd-8d0a92618543\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-b2e7f64f-d7b4-45a0-94dd-8d0a92618543\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving futebol.csv to futebol.csv\n",
            "Colunas disponíveis no DataFrame:\n",
            "Index(['ano_campeonato', 'data', 'rodada', 'estadio', 'arbitro', 'publico',\n",
            "       'publico_max', 'time_mandante', 'time_visitante', 'tecnico_mandante',\n",
            "       'tecnico_visitante', 'colocacao_mandante', 'colocacao_visitante',\n",
            "       'valor_equipe_titular_mandante', 'valor_equipe_titular_visitante',\n",
            "       'idade_media_titular_mandante', 'idade_media_titular_visitante',\n",
            "       'gols_mandante', 'gols_visitante', 'gols_1_tempo_mandante',\n",
            "       'gols_1_tempo_visitante', 'escanteios_mandante', 'escanteios_visitante',\n",
            "       'faltas_mandante', 'faltas_visitante', 'chutes_bola_parada_mandante',\n",
            "       'chutes_bola_parada_visitante', 'defesas_mandante', 'defesas_visitante',\n",
            "       'impedimentos_mandante', 'impedimentos_visitante', 'chutes_mandante',\n",
            "       'chutes_visitante', 'chutes_fora_mandante', 'chutes_fora_visitante'],\n",
            "      dtype='object')\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-28-28781034ec5e>:47: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[col].fillna(df[col].median(), inplace=True)\n",
            "<ipython-input-28-28781034ec5e>:50: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[col].fillna(df[col].mode()[0], inplace=True)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.3866 - loss: 1.5413 - val_accuracy: 0.4908 - val_loss: 1.0550\n",
            "Epoch 2/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.4637 - loss: 1.0887 - val_accuracy: 0.5098 - val_loss: 1.0261\n",
            "Epoch 3/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.4935 - loss: 1.0245 - val_accuracy: 0.5127 - val_loss: 1.0074\n",
            "Epoch 4/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.5282 - loss: 0.9650 - val_accuracy: 0.5287 - val_loss: 0.9829\n",
            "Epoch 5/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.5533 - loss: 0.9229 - val_accuracy: 0.5423 - val_loss: 0.9713\n",
            "Epoch 6/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.5823 - loss: 0.8800 - val_accuracy: 0.5411 - val_loss: 0.9671\n",
            "Epoch 7/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.6018 - loss: 0.8390 - val_accuracy: 0.5464 - val_loss: 0.9637\n",
            "Epoch 8/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.6045 - loss: 0.8243 - val_accuracy: 0.5411 - val_loss: 0.9702\n",
            "Epoch 9/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.6348 - loss: 0.7888 - val_accuracy: 0.5458 - val_loss: 0.9863\n",
            "Epoch 10/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step - accuracy: 0.6470 - loss: 0.7558 - val_accuracy: 0.5387 - val_loss: 1.0088\n",
            "Epoch 11/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 8ms/step - accuracy: 0.6581 - loss: 0.7392 - val_accuracy: 0.5310 - val_loss: 1.0213\n",
            "Epoch 12/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.6678 - loss: 0.7342 - val_accuracy: 0.5245 - val_loss: 1.0302\n",
            "Epoch 13/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.6620 - loss: 0.7192 - val_accuracy: 0.5245 - val_loss: 1.0571\n",
            "Epoch 14/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.6876 - loss: 0.6843 - val_accuracy: 0.5263 - val_loss: 1.1041\n",
            "Epoch 15/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.6902 - loss: 0.6857 - val_accuracy: 0.5257 - val_loss: 1.1090\n",
            "Epoch 16/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7003 - loss: 0.6547 - val_accuracy: 0.5305 - val_loss: 1.1688\n",
            "Epoch 17/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7073 - loss: 0.6352 - val_accuracy: 0.5180 - val_loss: 1.1904\n",
            "Epoch 18/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7315 - loss: 0.6135 - val_accuracy: 0.5245 - val_loss: 1.2519\n",
            "Epoch 19/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step - accuracy: 0.7241 - loss: 0.6121 - val_accuracy: 0.5310 - val_loss: 1.2641\n",
            "Epoch 20/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.7479 - loss: 0.5847 - val_accuracy: 0.5216 - val_loss: 1.3264\n",
            "Epoch 21/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7500 - loss: 0.5722 - val_accuracy: 0.5263 - val_loss: 1.3493\n",
            "Epoch 22/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7506 - loss: 0.5733 - val_accuracy: 0.5186 - val_loss: 1.4027\n",
            "Epoch 23/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.7580 - loss: 0.5500 - val_accuracy: 0.5305 - val_loss: 1.4553\n",
            "Epoch 24/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7710 - loss: 0.5170 - val_accuracy: 0.5257 - val_loss: 1.5427\n",
            "Epoch 25/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7821 - loss: 0.5080 - val_accuracy: 0.5145 - val_loss: 1.6109\n",
            "Epoch 26/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - accuracy: 0.7840 - loss: 0.5058 - val_accuracy: 0.5157 - val_loss: 1.6578\n",
            "Epoch 27/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - accuracy: 0.8010 - loss: 0.4789 - val_accuracy: 0.5299 - val_loss: 1.6712\n",
            "Epoch 28/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.7965 - loss: 0.4751 - val_accuracy: 0.5222 - val_loss: 1.7982\n",
            "Epoch 29/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8088 - loss: 0.4561 - val_accuracy: 0.5257 - val_loss: 1.8996\n",
            "Epoch 30/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8090 - loss: 0.4489 - val_accuracy: 0.5103 - val_loss: 1.8594\n",
            "Epoch 31/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8228 - loss: 0.4239 - val_accuracy: 0.5228 - val_loss: 2.0584\n",
            "Epoch 32/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.8178 - loss: 0.4438 - val_accuracy: 0.5174 - val_loss: 2.0544\n",
            "Epoch 33/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8238 - loss: 0.4196 - val_accuracy: 0.5257 - val_loss: 2.1850\n",
            "Epoch 34/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.8356 - loss: 0.4143 - val_accuracy: 0.5222 - val_loss: 2.2849\n",
            "Epoch 35/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 7ms/step - accuracy: 0.8307 - loss: 0.3976 - val_accuracy: 0.5234 - val_loss: 2.2387\n",
            "Epoch 36/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8411 - loss: 0.3892 - val_accuracy: 0.4979 - val_loss: 2.4253\n",
            "Epoch 37/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8485 - loss: 0.3650 - val_accuracy: 0.5121 - val_loss: 2.4348\n",
            "Epoch 38/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8542 - loss: 0.3537 - val_accuracy: 0.5163 - val_loss: 2.6285\n",
            "Epoch 39/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.8551 - loss: 0.3601 - val_accuracy: 0.5098 - val_loss: 2.4683\n",
            "Epoch 40/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8588 - loss: 0.3519 - val_accuracy: 0.5240 - val_loss: 2.6337\n",
            "Epoch 41/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 8ms/step - accuracy: 0.8695 - loss: 0.3465 - val_accuracy: 0.5109 - val_loss: 2.6474\n",
            "Epoch 42/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 7ms/step - accuracy: 0.8657 - loss: 0.3282 - val_accuracy: 0.5056 - val_loss: 2.8766\n",
            "Epoch 43/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.8703 - loss: 0.3350 - val_accuracy: 0.5192 - val_loss: 2.8804\n",
            "Epoch 44/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8727 - loss: 0.3265 - val_accuracy: 0.4991 - val_loss: 3.0406\n",
            "Epoch 45/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8810 - loss: 0.3040 - val_accuracy: 0.4944 - val_loss: 2.9416\n",
            "Epoch 46/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8819 - loss: 0.3001 - val_accuracy: 0.5180 - val_loss: 3.1167\n",
            "Epoch 47/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8834 - loss: 0.2920 - val_accuracy: 0.5103 - val_loss: 2.9505\n",
            "Epoch 48/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 9ms/step - accuracy: 0.8874 - loss: 0.2911 - val_accuracy: 0.5145 - val_loss: 3.0816\n",
            "Epoch 49/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.8778 - loss: 0.2931 - val_accuracy: 0.5192 - val_loss: 3.2794\n",
            "Epoch 50/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.8941 - loss: 0.2745 - val_accuracy: 0.5092 - val_loss: 3.6011\n",
            "Epoch 51/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8962 - loss: 0.2704 - val_accuracy: 0.5009 - val_loss: 3.4281\n",
            "Epoch 52/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8949 - loss: 0.2639 - val_accuracy: 0.5050 - val_loss: 3.7552\n",
            "Epoch 53/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9039 - loss: 0.2662 - val_accuracy: 0.5021 - val_loss: 3.6448\n",
            "Epoch 54/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9000 - loss: 0.2614 - val_accuracy: 0.5092 - val_loss: 3.7457\n",
            "Epoch 55/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8974 - loss: 0.2588 - val_accuracy: 0.5263 - val_loss: 3.9266\n",
            "Epoch 56/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step - accuracy: 0.9042 - loss: 0.2487 - val_accuracy: 0.5169 - val_loss: 3.7054\n",
            "Epoch 57/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 8ms/step - accuracy: 0.9071 - loss: 0.2401 - val_accuracy: 0.4997 - val_loss: 3.6507\n",
            "Epoch 58/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.9028 - loss: 0.3074 - val_accuracy: 0.5074 - val_loss: 3.3338\n",
            "Epoch 59/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9106 - loss: 0.2419 - val_accuracy: 0.5080 - val_loss: 3.7559\n",
            "Epoch 60/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9106 - loss: 0.2297 - val_accuracy: 0.5133 - val_loss: 3.6629\n",
            "Epoch 61/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9100 - loss: 0.2379 - val_accuracy: 0.5074 - val_loss: 4.0540\n",
            "Epoch 62/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9174 - loss: 0.2168 - val_accuracy: 0.5098 - val_loss: 3.9994\n",
            "Epoch 63/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9097 - loss: 0.2372 - val_accuracy: 0.5086 - val_loss: 4.1285\n",
            "Epoch 64/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.9163 - loss: 0.2235 - val_accuracy: 0.5133 - val_loss: 4.0797\n",
            "Epoch 65/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.9254 - loss: 0.2027 - val_accuracy: 0.5098 - val_loss: 4.0855\n",
            "Epoch 66/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9260 - loss: 0.2048 - val_accuracy: 0.5092 - val_loss: 4.3694\n",
            "Epoch 67/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9186 - loss: 0.2100 - val_accuracy: 0.5080 - val_loss: 4.3192\n",
            "Epoch 68/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9200 - loss: 0.1981 - val_accuracy: 0.4997 - val_loss: 4.4055\n",
            "Epoch 69/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9202 - loss: 0.2226 - val_accuracy: 0.5115 - val_loss: 4.4834\n",
            "Epoch 70/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9225 - loss: 0.2114 - val_accuracy: 0.5103 - val_loss: 4.5981\n",
            "Epoch 71/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9278 - loss: 0.1958 - val_accuracy: 0.5098 - val_loss: 4.7414\n",
            "Epoch 72/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9231 - loss: 0.1902 - val_accuracy: 0.5086 - val_loss: 5.0395\n",
            "Epoch 73/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step - accuracy: 0.9217 - loss: 0.2156 - val_accuracy: 0.5086 - val_loss: 4.6503\n",
            "Epoch 74/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.9228 - loss: 0.2063 - val_accuracy: 0.5098 - val_loss: 4.7052\n",
            "Epoch 75/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9248 - loss: 0.1913 - val_accuracy: 0.5086 - val_loss: 4.4837\n",
            "Epoch 76/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.9255 - loss: 0.1968 - val_accuracy: 0.5127 - val_loss: 4.5975\n",
            "Epoch 77/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9289 - loss: 0.1896 - val_accuracy: 0.5050 - val_loss: 4.8214\n",
            "Epoch 78/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9317 - loss: 0.1883 - val_accuracy: 0.5038 - val_loss: 4.9625\n",
            "Epoch 79/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9281 - loss: 0.1929 - val_accuracy: 0.5169 - val_loss: 4.9145\n",
            "Epoch 80/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9291 - loss: 0.1725 - val_accuracy: 0.5216 - val_loss: 5.1551\n",
            "Epoch 81/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step - accuracy: 0.9336 - loss: 0.1823 - val_accuracy: 0.5068 - val_loss: 5.3829\n",
            "Epoch 82/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.9337 - loss: 0.1793 - val_accuracy: 0.5133 - val_loss: 5.3626\n",
            "Epoch 83/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9284 - loss: 0.1854 - val_accuracy: 0.5127 - val_loss: 5.4622\n",
            "Epoch 84/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9361 - loss: 0.1573 - val_accuracy: 0.5174 - val_loss: 5.8536\n",
            "Epoch 85/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9324 - loss: 0.1926 - val_accuracy: 0.5198 - val_loss: 5.5765\n",
            "Epoch 86/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9391 - loss: 0.1609 - val_accuracy: 0.5180 - val_loss: 5.7008\n",
            "Epoch 87/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9347 - loss: 0.1774 - val_accuracy: 0.5163 - val_loss: 6.0285\n",
            "Epoch 88/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9343 - loss: 0.1822 - val_accuracy: 0.5121 - val_loss: 5.7731\n",
            "Epoch 89/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9440 - loss: 0.1885 - val_accuracy: 0.5216 - val_loss: 5.7931\n",
            "Epoch 90/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - accuracy: 0.9329 - loss: 0.1683 - val_accuracy: 0.5109 - val_loss: 5.5332\n",
            "Epoch 91/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.9359 - loss: 0.1733 - val_accuracy: 0.5139 - val_loss: 5.8597\n",
            "Epoch 92/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9403 - loss: 0.1650 - val_accuracy: 0.5080 - val_loss: 5.3057\n",
            "Epoch 93/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.9346 - loss: 0.1703 - val_accuracy: 0.5038 - val_loss: 5.5373\n",
            "Epoch 94/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9308 - loss: 0.1854 - val_accuracy: 0.5086 - val_loss: 5.1881\n",
            "Epoch 95/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9438 - loss: 0.1576 - val_accuracy: 0.5180 - val_loss: 5.6648\n",
            "Epoch 96/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.9465 - loss: 0.1430 - val_accuracy: 0.5127 - val_loss: 5.6034\n",
            "Epoch 97/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step - accuracy: 0.9403 - loss: 0.1589 - val_accuracy: 0.5098 - val_loss: 5.5450\n",
            "Epoch 98/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 8ms/step - accuracy: 0.9438 - loss: 0.1543 - val_accuracy: 0.5240 - val_loss: 5.5767\n",
            "Epoch 99/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.9393 - loss: 0.1621 - val_accuracy: 0.5157 - val_loss: 6.0308\n",
            "Epoch 100/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9436 - loss: 0.1401 - val_accuracy: 0.5139 - val_loss: 6.7104\n",
            "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5114 - loss: 6.4336\n",
            "Acurácia no conjunto de teste: 51.39%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Estatísticas Descritivas:\n",
            "       gols_mandante  gols_visitante  gols_1_tempo_mandante  \\\n",
            "count    8453.000000     8453.000000            8453.000000   \n",
            "mean        1.528097        1.023069               0.529634   \n",
            "std         1.218283        1.022840               0.762483   \n",
            "min         0.000000        0.000000               0.000000   \n",
            "25%         1.000000        0.000000               0.000000   \n",
            "50%         1.000000        1.000000               0.000000   \n",
            "75%         2.000000        2.000000               1.000000   \n",
            "max         7.000000        7.000000               5.000000   \n",
            "\n",
            "       gols_1_tempo_visitante  escanteios_mandante  escanteios_visitante  \\\n",
            "count             8453.000000          8453.000000           8453.000000   \n",
            "mean                 0.345085             5.202177              4.144209   \n",
            "std                  0.599573             1.580071              1.338357   \n",
            "min                  0.000000             0.000000              0.000000   \n",
            "25%                  0.000000             5.000000              4.000000   \n",
            "50%                  0.000000             5.000000              4.000000   \n",
            "75%                  1.000000             5.000000              4.000000   \n",
            "max                  4.000000            23.000000             18.000000   \n",
            "\n",
            "       faltas_mandante  faltas_visitante  chutes_bola_parada_mandante  \\\n",
            "count      8453.000000       8453.000000                  8453.000000   \n",
            "mean         14.262155         14.180646                    13.178990   \n",
            "std           6.009547          6.053820                     2.211546   \n",
            "min           0.000000          0.000000                     0.000000   \n",
            "25%          14.000000         14.000000                    13.000000   \n",
            "50%          14.000000         14.000000                    13.000000   \n",
            "75%          14.000000         14.000000                    13.000000   \n",
            "max         255.000000        255.000000                    30.000000   \n",
            "\n",
            "       chutes_bola_parada_visitante  defesas_mandante  defesas_visitante  \\\n",
            "count                   8453.000000       8453.000000        8453.000000   \n",
            "mean                      14.017035          2.959186           3.134390   \n",
            "std                        2.181580          0.931575           1.094091   \n",
            "min                        0.000000          0.000000           0.000000   \n",
            "25%                       14.000000          3.000000           3.000000   \n",
            "50%                       14.000000          3.000000           3.000000   \n",
            "75%                       14.000000          3.000000           3.000000   \n",
            "max                       30.000000         12.000000          13.000000   \n",
            "\n",
            "       impedimentos_mandante  impedimentos_visitante  chutes_mandante  \\\n",
            "count            8453.000000             8453.000000      8453.000000   \n",
            "mean                1.126937                1.105170        13.037501   \n",
            "std                 0.738278                0.686002         3.028948   \n",
            "min                 0.000000                0.000000         0.000000   \n",
            "25%                 1.000000                1.000000        13.000000   \n",
            "50%                 1.000000                1.000000        13.000000   \n",
            "75%                 1.000000                1.000000        13.000000   \n",
            "max                 9.000000                8.000000        37.000000   \n",
            "\n",
            "       chutes_visitante  chutes_fora_mandante  chutes_fora_visitante  \n",
            "count       8453.000000           8453.000000            8453.000000  \n",
            "mean          10.063409              6.005560               4.160653  \n",
            "std            2.608053              1.415499               1.292056  \n",
            "min            0.000000              0.000000               0.000000  \n",
            "25%           10.000000              6.000000               4.000000  \n",
            "50%           10.000000              6.000000               4.000000  \n",
            "75%           10.000000              6.000000               4.000000  \n",
            "max           31.000000             21.000000              14.000000  \n",
            "Digite o nome do time mandante: Flamengo\n",
            "Digite o nome do time visitante: Vasco da Gama\n",
            "\n",
            "Comparação entre Flamengo e Vasco da Gama:\n",
            "Vitórias do Flamengo: 6\n",
            "Empates: 8\n",
            "Vitórias do Vasco da Gama: 3\n",
            "Média de gols do Flamengo: 1.12\n",
            "Média de gols do Vasco da Gama: 0.82\n",
            "Média de gols no 1º tempo do Flamengo: 0.59\n",
            "Média de gols no 1º tempo do Vasco da Gama: 0.24\n",
            "Média de escanteios do Flamengo: 5.24\n",
            "Média de escanteios do Vasco da Gama: 4.41\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-28-28781034ec5e>:178: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x='resultado_str', data=df, palette='Set2')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0EAAAJ6CAYAAADuN0kDAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAgF1JREFUeJzt3Xd4FGXj9fGzCWmk0XtI6DV0QTpIE5BiQ3pTVHoRKaJSBdGHKkiRKtKLFKX3DmqkKNJCCFWqEGqAZN4/eLM/liSQwIbZsN/PdeXSnZ3snkx2w56Ze+6xGIZhCAAAAACchIvZAQAAAADgRaIEAQAAAHAqlCAAAAAAToUSBAAAAMCpUIIAAAAAOBVKEAAAAACnQgkCAAAA4FQoQQAAAACcCiUIcBJbt27VoEGDdP36dbOjAAAAmIoSBDiB8PBwNWzYUL6+vvL390/Q9wQFBal169bW25s3b5bFYtHmzZuTJuT/N2PGDFksFp08eTJJn8fZtG7dWkFBQWbHcEi85hLv5MmTslgsmjFjhtlRntnNmzeVIUMGzZ492+woSe7QoUNKkSKF/vrrL7OjAA6DEgQ4sJgPZxaLRdu3b491v2EYCggIkMVi0RtvvBHnY9y/f1/vvfeeWrdure7duyd1ZIcTU97i+5o3b57ZEZ9q586dGjBggK5du2Z2lGSjSpUqT/y9x3wNGDDA7Khxisn3wQcfxHl/v379rOtcvnz5Bad7cYYOHaqlS5cmyWOPGTNGvr6+aty4sbXUJeTrRZTlr776SvXr11fGjBmf+jo9e/asGjVqpFSpUsnPz08NGjTQiRMnbNYpWLCg6tatqy+//DKJkwPJRwqzAwB4Ok9PT82ZM0cVKlSwWb5lyxadOXNGHh4e8X7v33//rcaNG6tr167PlaFSpUq6c+eO3N3dn+txzNKlSxe98sorsZaXLVvWhDSJs3PnTg0cOFCtW7dWqlSpnukxfvjhB0VHR9s3mAPr16+fTYH47bffNHbsWH322WcqUKCAdXmRIkVUqFAhNW7c+InvIzN4enpq8eLF+v7772O97+bOnStPT0/dvXvXpHQvxtChQ/XOO++oYcOGdn3c+/fva8yYMerevbtcXV2VPn16zZo1y2adESNG6MyZMxo1apTN8vTp09s1S1w+//xzZcqUScWLF9eaNWviXe/mzZuqWrWqrl+/rs8++0xubm4aNWqUKleurH379ilt2rTWdT/++GPVqVNHoaGhypUrV5L/DICjowQByUCdOnW0cOFCjR07VilS/N/bds6cOSpZsuQT9wQXK1ZMxYoVe+4MLi4u8vT0fO7HMUvFihX1zjvvmB3DNG5ubmZHSBK3bt2St7d3rOU1atSwue3p6amxY8eqRo0aqlKlSqz1XV1dkyriM3v99de1fPlyrVq1Sg0aNLAu37lzp8LCwvT2229r8eLFJiZMvn755RddunRJjRo1kiR5e3urefPmNuvMmzdP//33X6zlL0JYWJiCgoJ0+fLlJ5au77//XseOHdPevXutO3lq166twoULa8SIERo6dKh13erVqyt16tSaOXOmBg0alOQ/A+DoGA4HJANNmjTRlStXtG7dOuuye/fuadGiRWratGmc3xMdHa3Ro0erUKFC8vT0VMaMGfXRRx/pv//+s1nPMAwNGTJE2bJlU8qUKVW1alX9/fffsR4vrnOCtm3bpnfffVfZs2eXh4eHAgIC1L17d925cydBP9fff/+t1157TV5eXsqWLZuGDBkS79GKVatWqWLFivL29pavr6/q1q0bZ87nsW7dOlWoUEGpUqWSj4+P8uXLp88++8xmnbt372rAgAHKmzevPD09lTlzZr311lsKDQ21rvO///1P5cqVU9q0aeXl5aWSJUtq0aJFsZ7PYrGoU6dOWrp0qQoXLiwPDw8VKlRIq1evtq4zYMAAffrpp5KkHDlyxDkk56efflLJkiXl5eWlNGnSqHHjxjp9+rTNc8V1TtCtW7f0ySefKCAgQB4eHsqXL5/+97//yTCMRG+XuMT8fLNnz1a+fPnk6empkiVLauvWrbHW/fPPP1W7dm35+fnJx8dH1apV0+7du23WiRkeumXLFnXo0EEZMmRQtmzZnprjaeI6JygoKEhvvPGGNm/erFKlSsnLy0vBwcHW1/+SJUsUHBxs/Zn+/PPPWI97+PBhvfPOO0qTJo08PT1VqlQpLV++PMG5smbNqkqVKmnOnDk2y2fPnq3g4GAVLlw41vck9D3ZunVr+fj46OzZs2rYsKF8fHyUPn169ezZU1FRUTbrXrt2Ta1bt5a/v79SpUqlVq1axTk088CBA2rdurVy5swpT09PZcqUSW3bttWVK1ds1hswYIAsFouOHz9uPbrp7++vNm3a6Pbt29b1LBaLbt26pZkzZ1pf94+ep3j27Fm1bdtWGTNmtL53pk2blqBtu3TpUgUFBSX6iMjFixf1/vvvK2PGjPL09FTRokU1c+ZMm3Vihtb973//06hRoxQYGCgvLy9Vrlw5wefkJPT8vUWLFumVV16xOcqdP39+VatWTQsWLLBZ183NTVWqVNGyZcsS9NjAy44jQUAyEBQUpLJly2ru3LmqXbu2pIel4Pr162rcuLHGjh0b63s++ugjzZgxQ23atFGXLl0UFhamcePG6c8//9SOHTusRwa+/PJLDRkyRHXq1FGdOnUUEhKimjVr6t69e0/NtXDhQt2+fVvt27dX2rRptXfvXn333Xc6c+aMFi5c+MTv/ffff1W1alU9ePBAffr0kbe3tyZPniwvL69Y686aNUutWrVSrVq1NHz4cN2+fVsTJkxQhQoV9OeffyboA8ONGzfiPGKWNm1aWSwW/f3333rjjTdUpEgRDRo0SB4eHjp+/Lh27NhhXTcqKkpvvPGGNmzYYB1ieOPGDa1bt05//fWX9QPVmDFjVL9+fTVr1kz37t3TvHnz9O677+qXX35R3bp1bZ5/+/btWrJkiTp06CBfX1+NHTtWb7/9tk6dOqW0adPqrbfe0tGjRzV37lyNGjVK6dKlk/R/Q3K++uorffHFF2rUqJE++OADXbp0Sd99950qVaqkP//8M97hc4ZhqH79+tq0aZPef/99FStWTGvWrNGnn36qs2fPWocAJWS7PMmWLVs0f/58denSRR4eHvr+++/1+uuva+/evdYP8X///bcqVqwoPz8/9erVS25ubpo0aZKqVKmiLVu2qEyZMjaP2aFDB6VPn15ffvmlbt26laAcz+L48eNq2rSpPvroIzVv3lz/+9//VK9ePU2cOFGfffaZOnToIEkaNmyYGjVqpCNHjsjFxcX6M5UvX15Zs2a1vr4XLFighg0bavHixXrzzTcTlKFp06bq2rWrbt68KR8fHz148EALFy5Ujx494hwKl5j3ZFRUlGrVqqUyZcrof//7n9avX68RI0YoV65cat++vaSHr5MGDRpo+/bt+vjjj1WgQAH9/PPPatWqVaznXrdunU6cOKE2bdooU6ZM+vvvvzV58mT9/fff2r17tywWi836jRo1Uo4cOTRs2DCFhIRoypQpypAhg4YPHy7p4fv+gw8+UOnSpfXhhx9KkvU9duHCBb366qvWop0+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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "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L3300UeKiIiwWe/Rc5xihrOuX79eH3zwgbJmzapcuXJZl3/77bfW/Dly5NCHH36oa9euObytYiT2/eXn56dGjRpp3bp1KleunDw9PVWiRAnr+2jp0qUqUaKEPDw8VLZsWe3atcvm/u3atVO6dOl0/Phx1a9fX2nTplWOHDk0dOhQGYZhs+7t27fVu3dv5c6dW+7u7ipUqJDGjBkTa724xOx/O3bsUOXKleXp6am8efNq8uTJsdZNzP4Xcy7SmDFjFBQUpPz588vd3V0HDhxIzOaNV1znOMVso9OnT6tRo0ZKly6dcubMqYkTJ0qS9u3bp9q1aytt2rTy9fXV/PnzYz3utWvX1LNnT+u28/f31xdffGF3+Orrr7+utGnTxvmYly5dUnBwsN566y1rb1Fc5ziNHz9exYoVU5o0aZQpUyaVK1fO5vEePcfJz89P+/fv1/r162MNY7x69ar69OljHZLs5eWlV155RXv27LF5zpjP88WLF+vzzz9Xrly55OHhoTp16igkJMS6Xs2aNfX777/r1KlT1ufy8/OzLk/s+zYuv//+u+7fv6+AgAC76z7s/v37GjZsmHWf8vPz08cffxznZ0WjRo20cuVKlS5dWh4eHipatKiWLl2aqOfJnTt3onq3lyxZIldXV7333nvWNg8PD3Xs2FFbt27VmTNnbNavW7euNm3apKtXryYqBxAfhuoB8fDz81OlSpW0YMECvfLKK5IeFBLXr1/XO++8o2+++SbWfTp37qxZs2apffv26t69u06cOKEJEyZo165d2rx5s3Woy6effqrhw4erQYMGatCggXbu3Kl69eopMjLSbq4ffvhB4eHh6tKli1544QVt375d48eP19mzZ/XDDz8keN/Q0FDVqlVL9+/fV//+/ZU2bVpNnTpVnp6esdadO3eu2rZtq/r16+uLL75QeHi4Jk2apKpVq2rXrl02/8gf9euvvyb5HIP9+/erWrVq8vLy0kcffaTUqVNrypQpqlmzptavX6+KFSvGeb/IyEjVr19fERER6tatm7Jly6Zz587pt99+07Vr1+xOzPHvv//q5Zdf1htvvKGmTZtqyZIl6tevn0qUKGH9u9+5c0c1a9ZUSEiIunbtqrx58+qHH35Qu3btdO3aNYeHZB4/flyurq7KmDGjtW3NmjVavHixunbtKm9v7wS3syQ1a9ZMRYoU0ahR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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout\n",
        "from google.colab import files\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 🚀 Upload do arquivo CSV\n",
        "uploaded = files.upload()\n",
        "df = pd.read_csv(next(iter(uploaded)))\n",
        "\n",
        "# 🔹 Verificar colunas disponíveis\n",
        "print(\"Colunas disponíveis no DataFrame:\")\n",
        "print(df.columns)\n",
        "\n",
        "# 🔹 Selecionar colunas relevantes\n",
        "cols = [\n",
        "    'ano_campeonato', 'data', 'rodada', 'estadio', 'arbitro', 'publico', 'publico_max',\n",
        "    'time_mandante', 'time_visitante', 'tecnico_mandante', 'tecnico_visitante',\n",
        "    'colocacao_mandante', 'colocacao_visitante', 'valor_equipe_titular_mandante',\n",
        "    'valor_equipe_titular_visitante', 'idade_media_titular_mandante', 'idade_media_titular_visitante',\n",
        "    'gols_mandante', 'gols_visitante', 'gols_1_tempo_mandante', 'gols_1_tempo_visitante',\n",
        "    'escanteios_mandante', 'escanteios_visitante', 'faltas_mandante', 'faltas_visitante',\n",
        "    'chutes_bola_parada_mandante', 'chutes_bola_parada_visitante', 'defesas_mandante',\n",
        "    'defesas_visitante', 'impedimentos_mandante', 'impedimentos_visitante', 'chutes_mandante',\n",
        "    'chutes_visitante', 'chutes_fora_mandante', 'chutes_fora_visitante'\n",
        "]\n",
        "\n",
        "df = df[cols]\n",
        "\n",
        "# 🔹 Preenchimento de valores ausentes\n",
        "num_cols = [\n",
        "    'publico', 'publico_max', 'colocacao_mandante', 'colocacao_visitante',\n",
        "    'valor_equipe_titular_mandante', 'valor_equipe_titular_visitante',\n",
        "    'idade_media_titular_mandante', 'idade_media_titular_visitante',\n",
        "    'gols_mandante', 'gols_visitante', 'gols_1_tempo_mandante', 'gols_1_tempo_visitante',\n",
        "    'escanteios_mandante', 'escanteios_visitante', 'faltas_mandante', 'faltas_visitante',\n",
        "    'chutes_bola_parada_mandante', 'chutes_bola_parada_visitante', 'defesas_mandante',\n",
        "    'defesas_visitante', 'impedimentos_mandante', 'impedimentos_visitante',\n",
        "    'chutes_mandante', 'chutes_visitante', 'chutes_fora_mandante', 'chutes_fora_visitante'\n",
        "]\n",
        "\n",
        "for col in num_cols:\n",
        "    df[col].fillna(df[col].median(), inplace=True)\n",
        "\n",
        "for col in ['time_mandante', 'time_visitante', 'tecnico_mandante', 'tecnico_visitante', 'estadio', 'arbitro']:\n",
        "    df[col].fillna(df[col].mode()[0], inplace=True)\n",
        "\n",
        "# 🔹 Criar variáveis temporais\n",
        "df['data'] = pd.to_datetime(df['data'])\n",
        "df['ano'] = df['data'].dt.year\n",
        "df['mes'] = df['data'].dt.month\n",
        "df['dia_semana'] = df['data'].dt.dayofweek\n",
        "df.drop(columns=['data'], inplace=True)\n",
        "\n",
        "# 🔹 Criar a variável de resultado\n",
        "df['resultado'] = np.where(df['gols_mandante'] > df['gols_visitante'], 'Vitória',\n",
        "                           np.where(df['gols_mandante'] < df['gols_visitante'], 'Derrota', 'Empate'))\n",
        "\n",
        "resultados_map = {'Vitória': 2, 'Empate': 1, 'Derrota': 0}\n",
        "df['resultado'] = df['resultado'].map(resultados_map)\n",
        "\n",
        "# 🔹 Preparar os dados para treino\n",
        "X = df.drop(columns=['resultado', 'gols_mandante', 'gols_visitante'])\n",
        "y = df['resultado']\n",
        "\n",
        "X = pd.get_dummies(X, columns=[\n",
        "    'ano_campeonato', 'time_mandante', 'time_visitante', 'tecnico_mandante',\n",
        "    'tecnico_visitante', 'estadio', 'arbitro'\n",
        "], drop_first=True)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# 🔹 Criar a rede neural\n",
        "model = Sequential([\n",
        "    Dense(128, activation='relu', input_dim=X_train.shape[1]),\n",
        "    Dropout(0.5),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(3, activation='softmax')\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# 🔹 Treinar o modelo\n",
        "history = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_test, y_test))\n",
        "\n",
        "# 🔹 Avaliação\n",
        "loss, accuracy = model.evaluate(X_test, y_test)\n",
        "print(f'Acurácia no conjunto de teste: {accuracy:.2%}')\n",
        "\n",
        "# 🔹 Visualizar o treinamento\n",
        "plt.plot(history.history['loss'], label='Perda no Treino')\n",
        "plt.plot(history.history['val_loss'], label='Perda na Validação')\n",
        "plt.title('Perda durante o Treinamento')\n",
        "plt.xlabel('Épocas')\n",
        "plt.ylabel('Perda')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "plt.plot(history.history['accuracy'], label='Acurácia no Treino')\n",
        "plt.plot(history.history['val_accuracy'], label='Acurácia na Validação')\n",
        "plt.title('Acurácia durante o Treinamento')\n",
        "plt.xlabel('Épocas')\n",
        "plt.ylabel('Acurácia')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# 🔹 Resultados Detalhados\n",
        "# Adicionar colunas de resultados ao DataFrame original\n",
        "df['resultado_str'] = df['resultado'].map({2: 'Vitória', 1: 'Empate', 0: 'Derrota'})\n",
        "\n",
        "# Exibir estatísticas descritivas\n",
        "print(\"\\nEstatísticas Descritivas:\")\n",
        "print(df[['gols_mandante', 'gols_visitante', 'gols_1_tempo_mandante', 'gols_1_tempo_visitante',\n",
        "          'escanteios_mandante', 'escanteios_visitante', 'faltas_mandante', 'faltas_visitante',\n",
        "          'chutes_bola_parada_mandante', 'chutes_bola_parada_visitante', 'defesas_mandante',\n",
        "          'defesas_visitante', 'impedimentos_mandante', 'impedimentos_visitante',\n",
        "          'chutes_mandante', 'chutes_visitante', 'chutes_fora_mandante', 'chutes_fora_visitante']].describe())\n",
        "\n",
        "# 🔹 Função para comparar dois times\n",
        "def comparar_times(time_mandante, time_visitante):\n",
        "    # Filtrar jogos entre os dois times\n",
        "    jogos = df[(df['time_mandante'] == time_mandante) & (df['time_visitante'] == time_visitante)]\n",
        "\n",
        "    if jogos.empty:\n",
        "        print(f\"Não há jogos registrados entre {time_mandante} e {time_visitante}.\")\n",
        "        return\n",
        "\n",
        "    # Estatísticas dos jogos\n",
        "    vitorias_mandante = jogos[jogos['resultado_str'] == 'Vitória'].shape[0]\n",
        "    empates = jogos[jogos['resultado_str'] == 'Empate'].shape[0]\n",
        "    vitorias_visitante = jogos[jogos['resultado_str'] == 'Derrota'].shape[0]\n",
        "\n",
        "    # Médias de gols e escanteios\n",
        "    media_gols_mandante = jogos['gols_mandante'].mean()\n",
        "    media_gols_visitante = jogos['gols_visitante'].mean()\n",
        "    media_gols_1_tempo_mandante = jogos['gols_1_tempo_mandante'].mean()\n",
        "    media_gols_1_tempo_visitante = jogos['gols_1_tempo_visitante'].mean()\n",
        "    media_escanteios_mandante = jogos['escanteios_mandante'].mean()\n",
        "    media_escanteios_visitante = jogos['escanteios_visitante'].mean()\n",
        "\n",
        "    # Exibir resultados\n",
        "    print(f\"\\nComparação entre {time_mandante} e {time_visitante}:\")\n",
        "    print(f\"Vitórias do {time_mandante}: {vitorias_mandante}\")\n",
        "    print(f\"Empates: {empates}\")\n",
        "    print(f\"Vitórias do {time_visitante}: {vitorias_visitante}\")\n",
        "    print(f\"Média de gols do {time_mandante}: {media_gols_mandante:.2f}\")\n",
        "    print(f\"Média de gols do {time_visitante}: {media_gols_visitante:.2f}\")\n",
        "    print(f\"Média de gols no 1º tempo do {time_mandante}: {media_gols_1_tempo_mandante:.2f}\")\n",
        "    print(f\"Média de gols no 1º tempo do {time_visitante}: {media_gols_1_tempo_visitante:.2f}\")\n",
        "    print(f\"Média de escanteios do {time_mandante}: {media_escanteios_mandante:.2f}\")\n",
        "    print(f\"Média de escanteios do {time_visitante}: {media_escanteios_visitante:.2f}\")\n",
        "\n",
        "    # Gráfico de resultados\n",
        "    resultados = [vitorias_mandante, empates, vitorias_visitante]\n",
        "    labels = [f'Vitórias {time_mandante}', 'Empates', f'Vitórias {time_visitante}']\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.bar(labels, resultados, color=['blue', 'gray', 'red'])\n",
        "    plt.title(f'Resultados entre {time_mandante} e {time_visitante}')\n",
        "    plt.ylabel('Quantidade de Jogos')\n",
        "    plt.show()\n",
        "\n",
        "# 🔹 Comparar dois times\n",
        "time_mandante = input(\"Digite o nome do time mandante: \")\n",
        "time_visitante = input(\"Digite o nome do time visitante: \")\n",
        "comparar_times(time_mandante, time_visitante)\n",
        "\n",
        "# 🔹 Gráficos gerais\n",
        "# 1. Distribuição dos resultados (Vitória, Empate, Derrota)\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.countplot(x='resultado_str', data=df, palette='Set2')\n",
        "plt.title('Distribuição dos Resultados')\n",
        "plt.xlabel('Resultado')\n",
        "plt.ylabel('Contagem')\n",
        "plt.show()\n",
        "\n",
        "# 2. Média de gols por time mandante e visitante\n",
        "plt.figure(figsize=(10, 6))\n",
        "df.groupby('time_mandante')['gols_mandante'].mean().sort_values(ascending=False).head(10).plot(kind='bar', color='skyblue')\n",
        "plt.title('Média de Gols por Time Mandante (Top 10)')\n",
        "plt.xlabel('Time Mandante')\n",
        "plt.ylabel('Média de Gols')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "df.groupby('time_visitante')['gols_visitante'].mean().sort_values(ascending=False).head(10).plot(kind='bar', color='lightgreen')\n",
        "plt.title('Média de Gols por Time Visitante (Top 10)')\n",
        "plt.xlabel('Time Visitante')\n",
        "plt.ylabel('Média de Gols')\n",
        "plt.show()\n",
        "\n",
        "# 3. Escanteios por time mandante e visitante\n",
        "plt.figure(figsize=(10, 6))\n",
        "df.groupby('time_mandante')['escanteios_mandante'].mean().sort_values(ascending=False).head(10).plot(kind='bar', color='orange')\n",
        "plt.title('Média de Escanteios por Time Mandante (Top 10)')\n",
        "plt.xlabel('Time Mandante')\n",
        "plt.ylabel('Média de Escanteios')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "df.groupby('time_visitante')['escanteios_visitante'].mean().sort_values(ascending=False).head(10).plot(kind='bar', color='pink')\n",
        "plt.title('Média de Escanteios por Time Visitante (Top 10)')\n",
        "plt.xlabel('Time Visitante')\n",
        "plt.ylabel('Média de Escanteios')\n",
        "plt.show()\n",
        "\n",
        "# 4. Gols no primeiro tempo\n",
        "plt.figure(figsize=(10, 6))\n",
        "df.groupby('time_mandante')['gols_1_tempo_mandante'].mean().sort_values(ascending=False).head(10).plot(kind='bar', color='purple')\n",
        "plt.title('Média de Gols no Primeiro Tempo por Time Mandante (Top 10)')\n",
        "plt.xlabel('Time Mandante')\n",
        "plt.ylabel('Média de Gols no Primeiro Tempo')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "df.groupby('time_visitante')['gols_1_tempo_visitante'].mean().sort_values(ascending=False).head(10).plot(kind='bar', color='brown')\n",
        "plt.title('Média de Gols no Primeiro Tempo por Time Visitante (Top 10)')\n",
        "plt.xlabel('Time Visitante')\n",
        "plt.ylabel('Média de Gols no Primeiro Tempo')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "5bmyfXnzSAZk",
        "outputId": "60beee53-ff41-42c3-ebc6-48ebc7e2fa0c"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-cbe138ab-69ed-46de-bd65-bfd3b8e8c8eb\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-cbe138ab-69ed-46de-bd65-bfd3b8e8c8eb\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving futbol.csv to futbol (13).csv\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ano_campeonato                       0\n",
              "data                                 0\n",
              "rodada                               0\n",
              "estadio                             11\n",
              "arbitro                           1710\n",
              "publico                           1711\n",
              "publico_max                       4272\n",
              "time_mandante                        0\n",
              "time_visitante                       0\n",
              "tecnico_mandante                  2154\n",
              "tecnico_visitante                 2154\n",
              "colocacao_mandante                1710\n",
              "colocacao_visitante               1710\n",
              "valor_equipe_titular_mandante     2098\n",
              "valor_equipe_titular_visitante    2098\n",
              "idade_media_titular_mandante      2100\n",
              "idade_media_titular_visitante     2100\n",
              "gols_mandante                        1\n",
              "gols_visitante                       1\n",
              "gols_1_tempo_mandante             1721\n",
              "gols_1_tempo_visitante            1721\n",
              "escanteios_mandante               6366\n",
              "escanteios_visitante              6366\n",
              "faltas_mandante                   6366\n",
              "faltas_visitante                  6366\n",
              "chutes_bola_parada_mandante       6366\n",
              "chutes_bola_parada_visitante      6366\n",
              "defesas_mandante                  6366\n",
              "defesas_visitante                 6366\n",
              "impedimentos_mandante             6366\n",
              "impedimentos_visitante            6366\n",
              "chutes_mandante                   6366\n",
              "chutes_visitante                  6366\n",
              "chutes_fora_mandante              6366\n",
              "chutes_fora_visitante             6366\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>ano_campeonato</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>data</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rodada</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>estadio</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arbitro</th>\n",
              "      <td>1710</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>publico</th>\n",
              "      <td>1711</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>publico_max</th>\n",
              "      <td>4272</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>time_mandante</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>time_visitante</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tecnico_mandante</th>\n",
              "      <td>2154</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tecnico_visitante</th>\n",
              "      <td>2154</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>colocacao_mandante</th>\n",
              "      <td>1710</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>colocacao_visitante</th>\n",
              "      <td>1710</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>valor_equipe_titular_mandante</th>\n",
              "      <td>2098</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>valor_equipe_titular_visitante</th>\n",
              "      <td>2098</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>idade_media_titular_mandante</th>\n",
              "      <td>2100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>idade_media_titular_visitante</th>\n",
              "      <td>2100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gols_mandante</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gols_visitante</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gols_1_tempo_mandante</th>\n",
              "      <td>1721</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gols_1_tempo_visitante</th>\n",
              "      <td>1721</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>escanteios_mandante</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>escanteios_visitante</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>faltas_mandante</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>faltas_visitante</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chutes_bola_parada_mandante</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chutes_bola_parada_visitante</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>defesas_mandante</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>defesas_visitante</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>impedimentos_mandante</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>impedimentos_visitante</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chutes_mandante</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chutes_visitante</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chutes_fora_mandante</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chutes_fora_visitante</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from google.colab import files\n",
        "\n",
        "# Solicitar o upload do arquivo CSV\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Carregar os dados\n",
        "df = pd.read_csv(next(iter(uploaded)))\n",
        "df.isnull().sum()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout\n",
        "from google.colab import files\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 🚀 Upload do arquivo CSV\n",
        "uploaded = files.upload()\n",
        "df = pd.read_csv(next(iter(uploaded)))\n",
        "\n",
        "# 🔹 Selecionar colunas relevantes\n",
        "cols = ['ano_campeonato', 'data', 'rodada', 'publico', 'publico_max', 'time_mandante', 'time_visitante',\n",
        "        'colocacao_mandante', 'colocacao_visitante', 'valor_equipe_titular_mandante',\n",
        "        'valor_equipe_titular_visitante', 'idade_media_titular_mandante', 'idade_media_titular_visitante',\n",
        "        'gols_mandante', 'gols_visitante']\n",
        "\n",
        "df = df[cols]\n",
        "\n",
        "# 🔹 Preenchimento de valores ausentes\n",
        "num_cols = ['publico', 'publico_max', 'colocacao_mandante', 'colocacao_visitante',\n",
        "            'valor_equipe_titular_mandante', 'valor_equipe_titular_visitante',\n",
        "            'idade_media_titular_mandante', 'idade_media_titular_visitante']\n",
        "\n",
        "for col in num_cols:\n",
        "    df[col].fillna(df[col].median(), inplace=True)\n",
        "\n",
        "for col in ['time_mandante', 'time_visitante']:\n",
        "    df[col].fillna(df[col].mode()[0], inplace=True)\n",
        "\n",
        "# 🔹 Criar variáveis temporais\n",
        "df['data'] = pd.to_datetime(df['data'])\n",
        "df['ano'] = df['data'].dt.year\n",
        "df['mes'] = df['data'].dt.month\n",
        "df['dia_semana'] = df['data'].dt.dayofweek\n",
        "df.drop(columns=['data'], inplace=True)\n",
        "\n",
        "# 🔹 Criar a variável de resultado\n",
        "df['resultado'] = np.where(df['gols_mandante'] > df['gols_visitante'], 'Vitória',\n",
        "                           np.where(df['gols_mandante'] < df['gols_visitante'], 'Derrota', 'Empate'))\n",
        "\n",
        "resultados_map = {'Vitória': 2, 'Empate': 1, 'Derrota': 0}\n",
        "df['resultado'] = df['resultado'].map(resultados_map)\n",
        "\n",
        "# 🔹 Preparar os dados para treino\n",
        "X = df.drop(columns=['resultado', 'gols_mandante', 'gols_visitante'])  # Removendo gols para evitar vazamento de dados\n",
        "y = df['resultado']\n",
        "\n",
        "X = pd.get_dummies(X, columns=['ano_campeonato', 'time_mandante', 'time_visitante'], drop_first=True)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# 🔹 Criar a rede neural\n",
        "model = Sequential([\n",
        "    Dense(128, activation='relu', input_dim=X_train.shape[1]),\n",
        "    Dropout(0.5),  # Adicionando Dropout para evitar overfitting\n",
        "    Dense(64, activation='relu'),\n",
        "    Dropout(0.5),  # Adicionando Dropout para evitar overfitting\n",
        "    Dense(3, activation='softmax')  # Três saídas: vitória, empate, derrota\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# 🔹 Treinar o modelo\n",
        "history = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_test, y_test))\n",
        "\n",
        "# 🔹 Avaliação\n",
        "loss, accuracy = model.evaluate(X_test, y_test)\n",
        "print(f'Acurácia no conjunto de teste: {accuracy:.2%}')\n",
        "\n",
        "# 🔹 Função para comparar dois times\n",
        "def comparar_times(time_mandante, time_visitante):\n",
        "    # Filtrar jogos entre os dois times\n",
        "    jogos = df[(df['time_mandante'] == time_mandante) & (df['time_visitante'] == time_visitante)]\n",
        "\n",
        "    if jogos.empty:\n",
        "        print(f\"Não há jogos registrados entre {time_mandante} e {time_visitante}.\")\n",
        "        return\n",
        "\n",
        "    # Estatísticas dos jogos\n",
        "    vitorias_mandante = jogos[jogos['resultado'] == 2].shape[0]\n",
        "    empates = jogos[jogos['resultado'] == 1].shape[0]\n",
        "    vitorias_visitante = jogos[jogos['resultado'] == 0].shape[0]\n",
        "\n",
        "    # Médias de gols\n",
        "    media_gols_mandante = jogos['gols_mandante'].mean()\n",
        "    media_gols_visitante = jogos['gols_visitante'].mean()\n",
        "\n",
        "    # Exibir resultados\n",
        "    print(f\"\\nComparação entre {time_mandante} e {time_visitante}:\")\n",
        "    print(f\"Vitórias do {time_mandante}: {vitorias_mandante}\")\n",
        "    print(f\"Empates: {empates}\")\n",
        "    print(f\"Vitórias do {time_visitante}: {vitorias_visitante}\")\n",
        "    print(f\"Média de gols do {time_mandante}: {media_gols_mandante:.2f}\")\n",
        "    print(f\"Média de gols do {time_visitante}: {media_gols_visitante:.2f}\")\n",
        "\n",
        "    # Gráfico de resultados\n",
        "    resultados = [vitorias_mandante, empates, vitorias_visitante]\n",
        "    labels = [f'Vitórias {time_mandante}', 'Empates', f'Vitórias {time_visitante}']\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.bar(labels, resultados, color=['blue', 'gray', 'red'])\n",
        "    plt.title(f'Resultados entre {time_mandante} e {time_visitante}')\n",
        "    plt.ylabel('Quantidade de Jogos')\n",
        "    plt.show()\n",
        "\n",
        "# 🔹 Comparar dois times\n",
        "time_mandante = input(\"Digite o nome do time mandante: \")\n",
        "time_visitante = input(\"Digite o nome do time visitante: \")\n",
        "comparar_times(time_mandante, time_visitante)\n",
        "\n",
        "# 🔹 Fazer previsão com novos dados\n",
        "novos_dados = pd.DataFrame([[2023, 4, 5, 25000, 30000, time_mandante, time_visitante, 5, 8, 200000, 220000, 28, 27, 3, 1]],\n",
        "                           columns=['ano_campeonato', 'mes', 'dia_semana', 'publico', 'publico_max', 'time_mandante', 'time_visitante',\n",
        "                                    'colocacao_mandante', 'colocacao_visitante', 'valor_equipe_titular_mandante',\n",
        "                                    'valor_equipe_titular_visitante', 'idade_media_titular_mandante', 'idade_media_titular_visitante',\n",
        "                                    'gols_mandante', 'gols_visitante'])\n",
        "\n",
        "# 🔹 Aplicar One-Hot Encoding nos novos dados\n",
        "novos_dados = pd.get_dummies(novos_dados, columns=['ano_campeonato', 'time_mandante', 'time_visitante'], drop_first=True)\n",
        "\n",
        "# 🔹 Garantir que os novos dados tenham as mesmas colunas do modelo\n",
        "novos_dados = novos_dados.reindex(columns=X.columns, fill_value=0)\n",
        "\n",
        "# 🔹 Padronizar os novos dados\n",
        "novos_dados = scaler.transform(novos_dados)\n",
        "\n",
        "# 🔹 Prever o resultado\n",
        "previsao = model.predict(novos_dados)\n",
        "\n",
        "# 🔹 Exibir a saída bruta da rede neural\n",
        "print(\"Saída bruta da rede:\", previsao)\n",
        "\n",
        "# 🔹 Converter para percentuais\n",
        "percentuais = (previsao[0] * 100).round(2)\n",
        "\n",
        "# 🔹 Exibir os resultados\n",
        "print(f\"Probabilidades: Vitória: {percentuais[2]}%, Empate: {percentuais[1]}%, Derrota: {percentuais[0]}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "qWahJhZhzip6",
        "outputId": "8af9a713-6f7a-467c-cdc5-e3a09d42dcb6"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-de3ae84c-0a67-4469-89e5-b11186776f9a\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-de3ae84c-0a67-4469-89e5-b11186776f9a\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving futbol.csv to futbol (18).csv\n",
            "Epoch 1/100\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-26-d99b533e1dc8>:29: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[col].fillna(df[col].median(), inplace=True)\n",
            "<ipython-input-26-d99b533e1dc8>:32: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[col].fillna(df[col].mode()[0], inplace=True)\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.4063 - loss: 1.2733 - val_accuracy: 0.5003 - val_loss: 1.0430\n",
            "Epoch 2/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.4698 - loss: 1.0630 - val_accuracy: 0.5021 - val_loss: 1.0336\n",
            "Epoch 3/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.4916 - loss: 1.0368 - val_accuracy: 0.5074 - val_loss: 1.0272\n",
            "Epoch 4/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5012 - loss: 1.0210 - val_accuracy: 0.5050 - val_loss: 1.0270\n",
            "Epoch 5/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5037 - loss: 1.0121 - val_accuracy: 0.5068 - val_loss: 1.0217\n",
            "Epoch 6/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4951 - loss: 1.0261 - val_accuracy: 0.5092 - val_loss: 1.0203\n",
            "Epoch 7/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5055 - loss: 1.0170 - val_accuracy: 0.5062 - val_loss: 1.0230\n",
            "Epoch 8/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5135 - loss: 1.0001 - val_accuracy: 0.5080 - val_loss: 1.0226\n",
            "Epoch 9/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5162 - loss: 0.9923 - val_accuracy: 0.5092 - val_loss: 1.0184\n",
            "Epoch 10/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5054 - loss: 1.0061 - val_accuracy: 0.5121 - val_loss: 1.0183\n",
            "Epoch 11/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5078 - loss: 0.9949 - val_accuracy: 0.5121 - val_loss: 1.0177\n",
            "Epoch 12/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5063 - loss: 0.9981 - val_accuracy: 0.5103 - val_loss: 1.0197\n",
            "Epoch 13/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5051 - loss: 1.0073 - val_accuracy: 0.5127 - val_loss: 1.0186\n",
            "Epoch 14/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.5239 - loss: 0.9850 - val_accuracy: 0.5086 - val_loss: 1.0202\n",
            "Epoch 15/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.5240 - loss: 0.9803 - val_accuracy: 0.5121 - val_loss: 1.0179\n",
            "Epoch 16/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5099 - loss: 0.9899 - val_accuracy: 0.5121 - val_loss: 1.0171\n",
            "Epoch 17/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5286 - loss: 0.9728 - val_accuracy: 0.5098 - val_loss: 1.0207\n",
            "Epoch 18/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5204 - loss: 0.9738 - val_accuracy: 0.5127 - val_loss: 1.0227\n",
            "Epoch 19/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5208 - loss: 0.9729 - val_accuracy: 0.5139 - val_loss: 1.0221\n",
            "Epoch 20/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5226 - loss: 0.9788 - val_accuracy: 0.5121 - val_loss: 1.0222\n",
            "Epoch 21/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5263 - loss: 0.9554 - val_accuracy: 0.5157 - val_loss: 1.0237\n",
            "Epoch 22/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5378 - loss: 0.9462 - val_accuracy: 0.5127 - val_loss: 1.0250\n",
            "Epoch 23/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5193 - loss: 0.9730 - val_accuracy: 0.5098 - val_loss: 1.0251\n",
            "Epoch 24/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5288 - loss: 0.9508 - val_accuracy: 0.5121 - val_loss: 1.0228\n",
            "Epoch 25/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.5343 - loss: 0.9547 - val_accuracy: 0.5169 - val_loss: 1.0229\n",
            "Epoch 26/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.5237 - loss: 0.9526 - val_accuracy: 0.5127 - val_loss: 1.0266\n",
            "Epoch 27/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.5202 - loss: 0.9519 - val_accuracy: 0.5133 - val_loss: 1.0274\n",
            "Epoch 28/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5334 - loss: 0.9445 - val_accuracy: 0.5092 - val_loss: 1.0331\n",
            "Epoch 29/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5415 - loss: 0.9390 - val_accuracy: 0.5109 - val_loss: 1.0329\n",
            "Epoch 30/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5318 - loss: 0.9376 - val_accuracy: 0.5151 - val_loss: 1.0364\n",
            "Epoch 31/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5281 - loss: 0.9504 - val_accuracy: 0.5033 - val_loss: 1.0402\n",
            "Epoch 32/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.5390 - loss: 0.9420 - val_accuracy: 0.5103 - val_loss: 1.0381\n",
            "Epoch 33/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.5459 - loss: 0.9262 - val_accuracy: 0.5038 - val_loss: 1.0407\n",
            "Epoch 34/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5550 - loss: 0.9199 - val_accuracy: 0.5033 - val_loss: 1.0391\n",
            "Epoch 35/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5355 - loss: 0.9433 - val_accuracy: 0.5068 - val_loss: 1.0446\n",
            "Epoch 36/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.5519 - loss: 0.9246 - val_accuracy: 0.5103 - val_loss: 1.0449\n",
            "Epoch 37/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.5626 - loss: 0.9158 - val_accuracy: 0.5033 - val_loss: 1.0469\n",
            "Epoch 38/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.5521 - loss: 0.9144 - val_accuracy: 0.5062 - val_loss: 1.0429\n",
            "Epoch 39/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5570 - loss: 0.9149 - val_accuracy: 0.5033 - val_loss: 1.0527\n",
            "Epoch 40/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5561 - loss: 0.9161 - val_accuracy: 0.5074 - val_loss: 1.0477\n",
            "Epoch 41/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5421 - loss: 0.9226 - val_accuracy: 0.5021 - val_loss: 1.0546\n",
            "Epoch 42/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5711 - loss: 0.8987 - val_accuracy: 0.4985 - val_loss: 1.0504\n",
            "Epoch 43/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5638 - loss: 0.8885 - val_accuracy: 0.5033 - val_loss: 1.0549\n",
            "Epoch 44/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5601 - loss: 0.8992 - val_accuracy: 0.5050 - val_loss: 1.0570\n",
            "Epoch 45/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5599 - loss: 0.8953 - val_accuracy: 0.4979 - val_loss: 1.0593\n",
            "Epoch 46/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5719 - loss: 0.8834 - val_accuracy: 0.4938 - val_loss: 1.0590\n",
            "Epoch 47/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.5735 - loss: 0.9016 - val_accuracy: 0.5050 - val_loss: 1.0582\n",
            "Epoch 48/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.5674 - loss: 0.8795 - val_accuracy: 0.4932 - val_loss: 1.0641\n",
            "Epoch 49/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5660 - loss: 0.8932 - val_accuracy: 0.4973 - val_loss: 1.0590\n",
            "Epoch 50/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5714 - loss: 0.8895 - val_accuracy: 0.5003 - val_loss: 1.0620\n",
            "Epoch 51/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5532 - loss: 0.8909 - val_accuracy: 0.5062 - val_loss: 1.0690\n",
            "Epoch 52/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5743 - loss: 0.8833 - val_accuracy: 0.4991 - val_loss: 1.0750\n",
            "Epoch 53/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5586 - loss: 0.8817 - val_accuracy: 0.4908 - val_loss: 1.0614\n",
            "Epoch 54/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5778 - loss: 0.8698 - val_accuracy: 0.4944 - val_loss: 1.0725\n",
            "Epoch 55/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5661 - loss: 0.8780 - val_accuracy: 0.4938 - val_loss: 1.0767\n",
            "Epoch 56/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5833 - loss: 0.8674 - val_accuracy: 0.4962 - val_loss: 1.0914\n",
            "Epoch 57/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5838 - loss: 0.8740 - val_accuracy: 0.4944 - val_loss: 1.0780\n",
            "Epoch 58/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.5830 - loss: 0.8537 - val_accuracy: 0.5027 - val_loss: 1.0834\n",
            "Epoch 59/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.5905 - loss: 0.8575 - val_accuracy: 0.4855 - val_loss: 1.0807\n",
            "Epoch 60/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5872 - loss: 0.8565 - val_accuracy: 0.4867 - val_loss: 1.0895\n",
            "Epoch 61/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5857 - loss: 0.8621 - val_accuracy: 0.4879 - val_loss: 1.0914\n",
            "Epoch 62/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5885 - loss: 0.8564 - val_accuracy: 0.4814 - val_loss: 1.1014\n",
            "Epoch 63/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5726 - loss: 0.8671 - val_accuracy: 0.4914 - val_loss: 1.0973\n",
            "Epoch 64/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5919 - loss: 0.8466 - val_accuracy: 0.4991 - val_loss: 1.0978\n",
            "Epoch 65/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5920 - loss: 0.8474 - val_accuracy: 0.4967 - val_loss: 1.1022\n",
            "Epoch 66/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5889 - loss: 0.8555 - val_accuracy: 0.4920 - val_loss: 1.1062\n",
            "Epoch 67/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5925 - loss: 0.8523 - val_accuracy: 0.4849 - val_loss: 1.1032\n",
            "Epoch 68/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5985 - loss: 0.8432 - val_accuracy: 0.4831 - val_loss: 1.1089\n",
            "Epoch 69/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.6043 - loss: 0.8488 - val_accuracy: 0.4914 - val_loss: 1.1103\n",
            "Epoch 70/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.5875 - loss: 0.8406 - val_accuracy: 0.4784 - val_loss: 1.1143\n",
            "Epoch 71/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.6086 - loss: 0.8329 - val_accuracy: 0.4743 - val_loss: 1.1166\n",
            "Epoch 72/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6046 - loss: 0.8254 - val_accuracy: 0.4725 - val_loss: 1.1116\n",
            "Epoch 73/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6036 - loss: 0.8260 - val_accuracy: 0.4766 - val_loss: 1.1204\n",
            "Epoch 74/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6032 - loss: 0.8503 - val_accuracy: 0.4766 - val_loss: 1.1154\n",
            "Epoch 75/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6066 - loss: 0.8258 - val_accuracy: 0.4619 - val_loss: 1.1162\n",
            "Epoch 76/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5983 - loss: 0.8428 - val_accuracy: 0.4784 - val_loss: 1.1293\n",
            "Epoch 77/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6083 - loss: 0.8384 - val_accuracy: 0.4743 - val_loss: 1.1367\n",
            "Epoch 78/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6140 - loss: 0.8262 - val_accuracy: 0.4695 - val_loss: 1.1140\n",
            "Epoch 79/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6036 - loss: 0.8303 - val_accuracy: 0.4731 - val_loss: 1.1351\n",
            "Epoch 80/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.6128 - loss: 0.8239 - val_accuracy: 0.4778 - val_loss: 1.1286\n",
            "Epoch 81/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.6097 - loss: 0.8298 - val_accuracy: 0.4737 - val_loss: 1.1145\n",
            "Epoch 82/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6133 - loss: 0.8119 - val_accuracy: 0.4666 - val_loss: 1.1222\n",
            "Epoch 83/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6137 - loss: 0.8166 - val_accuracy: 0.4684 - val_loss: 1.1215\n",
            "Epoch 84/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6131 - loss: 0.8055 - val_accuracy: 0.4595 - val_loss: 1.1259\n",
            "Epoch 85/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6081 - loss: 0.8162 - val_accuracy: 0.4755 - val_loss: 1.1327\n",
            "Epoch 86/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6265 - loss: 0.8072 - val_accuracy: 0.4642 - val_loss: 1.1411\n",
            "Epoch 87/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6242 - loss: 0.7982 - val_accuracy: 0.4583 - val_loss: 1.1341\n",
            "Epoch 88/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6294 - loss: 0.8013 - val_accuracy: 0.4536 - val_loss: 1.1314\n",
            "Epoch 89/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6296 - loss: 0.7868 - val_accuracy: 0.4435 - val_loss: 1.1460\n",
            "Epoch 90/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.6189 - loss: 0.7948 - val_accuracy: 0.4453 - val_loss: 1.1474\n",
            "Epoch 91/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.6212 - loss: 0.8043 - val_accuracy: 0.4548 - val_loss: 1.1513\n",
            "Epoch 92/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6242 - loss: 0.7997 - val_accuracy: 0.4465 - val_loss: 1.1372\n",
            "Epoch 93/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6170 - loss: 0.8073 - val_accuracy: 0.4483 - val_loss: 1.1610\n",
            "Epoch 94/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6397 - loss: 0.7890 - val_accuracy: 0.4423 - val_loss: 1.1706\n",
            "Epoch 95/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6289 - loss: 0.7891 - val_accuracy: 0.4441 - val_loss: 1.1685\n",
            "Epoch 96/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6209 - loss: 0.8063 - val_accuracy: 0.4406 - val_loss: 1.1574\n",
            "Epoch 97/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6186 - loss: 0.8046 - val_accuracy: 0.4465 - val_loss: 1.1753\n",
            "Epoch 98/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6236 - loss: 0.7920 - val_accuracy: 0.4577 - val_loss: 1.1612\n",
            "Epoch 99/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6159 - loss: 0.7869 - val_accuracy: 0.4483 - val_loss: 1.1553\n",
            "Epoch 100/100\n",
            "\u001b[1m212/212\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.6356 - loss: 0.7876 - val_accuracy: 0.4453 - val_loss: 1.1648\n",
            "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.4427 - loss: 1.1514\n",
            "Acurácia no conjunto de teste: 44.53%\n",
            "Digite o nome do time mandante: Flamengo\n",
            "Digite o nome do time visitante: Vasco\n",
            "Não há jogos registrados entre Flamengo e Vasco.\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 111ms/step\n",
            "Saída bruta da rede: [[0.0000000e+00 3.7045994e-28 1.0000000e+00]]\n",
            "Probabilidades: Vitória: 100.0%, Empate: 0.0%, Derrota: 0.0%\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
